#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: Tobias Hunger <tobias.hunger@gmail.com>
"""

if __name__ != '__main__':
    print('This file can not be imported.')
    exit(1)

from argparse import ArgumentParser

import cleanroom
import cleanroom.printer
import cleanroom.workdir
import os
import sys

def parse_commandline(arguments):
    '''This function parses the command line options.
    '''
    parser = ArgumentParser(description='Cleanroom OS image script generator',
                            prog=arguments[0])
    parser.add_argument('--debug', action='store_true', default=False,
                        help='Show debug information')
    parser.add_argument('--verbose', action='count', default=0, help='Be verbose')

    parser.add_argument('--ignore-errors', dest='ignore_errors', action='store_true',
                        help='Force continuation on non-critical errors.')

    parser.add_argument('--systemsdir', dest='system_dir', action='store',
                        help='Directory containing system definitions')
    parser.add_argument('--workdir', dest='work_dir', action='store',
                        help='Work area to create files in')

    parser.add_argument(dest='systems', nargs='+', metavar='<system>',
                        help='systems to create')

    parse_result = parser.parse_args(arguments[1:])

    return parse_result

args = parse_commandline(sys.argv)

pr = cleanroom.printer.Printer(args.verbose, args.debug)
pr.verbose('Verbose output enabled.')
pr.info('Info output enabled.')
pr.debug('Debug output enabled.')
pr.trace('Trace output enabled.')

# Set up Context object:
ctx = cleanroom.Context(pr)
try:
    ctx.priflightCheck()
except cleanroom.PreflightError:
    pr.fail(args.ignore_errors, 'Preflight Check failed')
else:
    pr.success('Preflight Check passed', verbosity = 1)

system_dir = args.system_dir if args.system_dir else os.getcwd()

# Do work:
with cleanroom.workdir.WorkDir(ctx, args.work_dir) as work_dir:
    ctx.setDirectories(system_dir, work_dir)

    try:
        ctx.generator.prepare()
    except cleanroom.PrepareError as e:
        pr.fail(args.ignore_errors, 'Preparation failed: {}'.format(e.message))
        raise
    else:
        pr.success('Preparation phase.', verbosity = 1)

    for s in args.systems:
        ctx.generator.addSystem(s)

    try:
        ctx.generator.generate()
    except cleanroom.GenerateError as e:
        pr.fail(args.ignore_errors, 'Generation failed: {}'.format(e.message))
    else:
        pr.success('Generation phase.', verbosity = 1)

pr.success('Done.', verbosity = 1)
