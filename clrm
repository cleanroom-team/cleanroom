#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Main CleanRoom binary.

@author: Tobias Hunger <tobias.hunger@gmail.com>
"""

if __name__ != '__main__':
    print('This file can not be imported.')
    exit(1)

import cleanroom.context as context
import cleanroom.exceptions as exceptions
import cleanroom.parser as parser
import cleanroom.printer as printer
import cleanroom.workdir as workdir

from argparse import ArgumentParser
import os
import sys

def parse_commandline(arguments):
    """This function parses the command line options."""
    parser = ArgumentParser(description='Cleanroom OS image script generator',
                            prog=arguments[0])
    parser.add_argument('--verbose', action='count', default=0,
                        help='Be verbose')
    parser.add_argument('--list-commands', dest='list_commands',
                        action='store_true',
                        help='List known commands for definition files')

    parser.add_argument('--ignore-errors', dest='ignore_errors', action='store_true',
                        help='Force continuation on non-critical errors.')

    parser.add_argument('--systemsdir', dest='system_dir', action='store',
                        help='Directory containing system definitions')
    parser.add_argument('--workdir', dest='work_dir', action='store',
                        help='Work area to create files in')

    parser.add_argument(dest='systems', nargs='*', metavar='<system>',
                        help='systems to create')

    parse_result = parser.parse_args(arguments[1:])

    return parse_result

args = parse_commandline(sys.argv)

if not args.list_commands and not args.systems:
    print('No systems to process.')
    sys.exit(1)

pr = printer.Printer(args.verbose)
pr.verbose('Verbose output enabled.')
pr.info('Info output enabled.')
pr.debug('Debug output enabled.')
pr.trace('Trace output enabled.')

# Set up Context object:
ctx = context.Context(pr, args.ignore_errors)
try:
    ctx.preflight_check()
except exceptions.PreflightError:
    pr.fail(args.ignore_errors, 'Preflight Check failed')
else:
    pr.success('Preflight Check passed', verbosity = 2)

system_dir = args.system_dir if args.system_dir else os.getcwd()

# Do work:
with workdir.WorkDir(ctx, args.work_dir) as work_dir:
    ctx.set_directories(system_dir, work_dir)

    if args.list_commands:
        parser.Parser.list_commands(ctx)
        sys.exit(0)

    try:
        ctx.generator.prepare()
    except exceptions.PrepareError as e:
        pr.fail(args.ignore_errors, 'Preparation failed: {}'.format(e.message))
        raise
    else:
        pr.success('Preparation phase.', verbosity = 2)

    for s in args.systems:
        ctx.generator.add_system(s)

    try:
        ctx.generator.generate()
    except exceptions.GenerateError as e:
        pr.fail(args.ignore_errors, 'Generation failed: {}'.format(e.message))
        raise
    else:
        pr.success('Generation phase.', verbosity = 2)

pr.success('Done.', verbosity = 3)
