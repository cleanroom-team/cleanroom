#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Main CleanRoom binary.

@author: Tobias Hunger <tobias.hunger@gmail.com>
"""

import cleanroom.context as context
import cleanroom.exceptions as ex
import cleanroom.helper.generic.mount as mount
import cleanroom.parser as parser
import cleanroom.printer as printer
import cleanroom.workdir as workdir

from argparse import ArgumentParser
import os
import re
import sys

def parse_commandline(arguments):
    """This function parses the command line options."""
    parser = ArgumentParser(description='Cleanroom OS image script generator',
                            prog=arguments[0])
    parser.add_argument('--verbose', action='count', default=0,
                        help='Be verbose')
    parser.add_argument('--list-commands', dest='list_commands',
                        action='store_true',
                        help='List known commands for definition files')

    parser.add_argument('--ignore-errors', dest='ignore_errors',
                        action='store_true',
                        help='Force continuation on non-critical errors.')

    parser.add_argument('--systems-directory', dest='systems_directory',
                        action='store',
                        help='Directory containing system definitions')
    parser.add_argument('--work-directory', dest='work_directory',
                        action='store', help='Work area to create files in')

    parser.add_argument('--export-repository', dest='export_repository',
                        action='store',
                        help='OStree repository to export created filesystems '
                        'into.')

    parser.add_argument(dest='systems', nargs='*', metavar='<system>',
                        help='systems to create')

    parse_result = parser.parse_args(arguments[1:])

    return parse_result


def main():
    args = parse_commandline(sys.argv)

    if not args.list_commands and not args.systems:
        print('No systems to process.')
        sys.exit(1)

    if not args.export_repository:
        print('No export repository given.')
        sys.exit(2)

    pr = printer.Printer(args.verbose)
    pr.verbose('Verbose output enabled.')
    pr.info('Info output enabled.')
    pr.debug('Debug output enabled.')
    pr.trace('Trace output enabled.')

    if not mount._umount_all(args.work_directory):
        print('Failed to unmount mounts below {}.'.format(args.work_directory))
        sys.exit(3)

    old_work_directory = os.getcwd()
    try:
        generate(pr, args)
    except AssertionError as ae:
        pr.fail('Assertion when generating system.', force_exit=False)
        raise
    except Exception as e:
        pr.fail('System generation failed: {}.'.format(e),
                ignore=args.ignore_errors,
                force_exit=False)
        raise
    else:
        pr.success('Done.', verbosity = 3)
    finally:
        os.chdir(old_work_directory)

def generate(pr, args):
    # Set up Context object:
    ctx = context.Context(export_repository=args.export_repository,
                          printer=pr, ignore_errors=args.ignore_errors)
    try:
        ctx.preflight_check()
    except ex.PreflightError:
        pr.fail('Preflight Check failed', ignore=args.ignore_errors)
        if not args.ignore_errors:
            raise
    else:
        pr.success('Preflight Check passed', verbosity = 2)

    systems_directory = args.systems_directory \
       if args.systems_directory else os.getcwd()

    # Do work:
    with workdir.WorkDir(ctx, args.work_directory) as work_directory:
        ctx.set_directories(systems_directory, work_directory)

        if args.list_commands:
            parser.Parser.list_commands(ctx)
            sys.exit(0)

        try:
            ctx.generator.prepare()
        except ex.PrepareError as e:
            pr.fail('Preparation failed: {}'.format(e),
                    ignore=args.ignore_errors)
            raise
        else:
            pr.success('Preparation phase.', verbosity = 2)

        for s in args.systems:
            ctx.generator.add_system(s)

        try:
            ctx.generator.generate()
        except ex.GenerateError as e:
            pr.fail('Generation failed: {}'.format(e),
                    ignore=args.ignore_errors)
            raise
        else:
            pr.success('Generation phase.', verbosity = 2)


if __name__ == '__main__':
    main()
